flowchart TD
    %% 數據層
    A["GitHub API"] --> B["Fetch Notifications\n(octokit.ts)"]
    B --> C["通知適配器(notificationAdapter.ts)"]
    C --> D["通知資料(Notification)"]
    D --> E["React Query狀態管理"]
    
    %% 倉庫層
    E --> F["RepoList.tsx(顯示倉庫列表)"]
    F -->|"選擇倉庫"| G["RepoNotificationSetting.tsx(管理通知偏好設置)"]
    
    %% RepoNotificationSetting 詳細功能
    G1["通知類型選擇：- Pull Requests- Issues- Commit"] -->|"包含於"| G
    G2["通知過濾機制：- filter() 根據類型篩選通知"] -->|"包含於"| G
    G3["用戶交互：- 切換類型- 全選/取消全選"] -->|"包含於"| G
    G4["狀態更新：- useMutation - 樂觀更新 - 錯誤回滾"] -->|"包含於"| G
    
    %% 倉庫偏好設置流程
    G -->|"PUT 更新通知類型偏好"| M["API: /repositories/:repo/preferences"]
    M -->|"更新 queryClient 緩存"| E
    
    %% 通知顯示層
    G -->|"傳遞過濾後的通知 filteredNotifications"| H["NotificationList.tsx(顯示通知列表)"]
    H --> I["NotificationItem.tsx(單個通知項目)"]
    H -->|"點擊查看詳情"| J["Dialog/OverlayModal(通知詳細內容)"]
    
    %% 用戶交互層
    I -->|"標記已讀按鈕"| K["用戶互動/標記已讀"]
    K --> L["API: /api/notifications/\n[threadId]/read"]
    L -->|"更新通知狀態"| E
    
    %% 樣式定義
    classDef apiNode fill:#ffcc99,stroke:#ff9900,stroke-width:2px;
    classDef dataNode fill:#99ccff,stroke:#3399ff,stroke-width:2px;
    classDef componentNode fill:#ccffcc,stroke:#66cc66,stroke-width:2px;
    classDef actionNode fill:#ffccff,stroke:#cc66cc,stroke-width:2px;
    classDef detailNode fill:#f9f9f9,stroke:#999999,stroke-width:1px,stroke-dasharray: 5 5;
    
    %% 應用樣式
    class A,B,M,L apiNode;
    class C,D,E dataNode;
    class F,G,H,I,J componentNode;
    class K actionNode;
    class G1,G2,G3,G4 detailNode;